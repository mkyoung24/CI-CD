# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_SSH_USER: ec2-user
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # (n) Gradlew 권한 설정
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Spring Boot 어플리케이션 Build (1)
    - name: Spring Boot Build
      run: ./gradlew clean build -x test
    
    # Docker 이미지 Build (2)
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/cagong .
    
    # DockerHub Login (3)
    - name: docker login 
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PW }}

    # Docker Hub push (4)
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKER_USERNAME }}/cagong

    #Deploy EC2 (5)
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_SSH_USER }}
        key: ${{ env.PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/cagong
          docker stop $(docker ps -a -q)
          docker start mariadb
          docker run --name cagong -p 8008:8008 --network prac -d ${{ secrets.DOCKER_USERNAME }}/cagong
          docker rm $(docker ps --filter 'status=exited' -a -q)
          docker image prune -a -f
      
